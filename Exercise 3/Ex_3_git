include("general_utils.jl")
include("standard_start.jl")

using Images

##Here’s an image. Use  imread() to load it into Julia and imshow() to display
## it in a figure. You’ll see that it’s a color image with 360 rows by 640
## columns of pixels. Since it is in color, each pixel doesn’t not only has a
## luminance values, but a red (R), green (G), and blue (B) value as well. Each
## pixel also has a fourth value (alpha) that we’re not going to use here.
## Therefore, this image is actually a set of four 360x640 matrices. Use size()
## to see that the image is 360x640x4, in other words, it is a set of memory
## slots arranged as a rectangular prism. The first 360x640 matrix
## (corresponding to indices [:,:,1]) is the R channel; then G; then B; and then
##alpha (which we will ignore). The figure below might be able to help you
## visualize this:

elcap = imread("el-capitan.png")

figure(1); clf();

imshow(elcap)

Write a function that takes as input a string representing the filename, and
## then loads the image file, displays it, and extracts the red, blue, and green
## channels into separate variables, and returns those variables. In other words,
## your function should take an image name as an argument and output three separate
## variables, that in the case of our example image would each be a 360x640 matrix.
## Commit and push your file to the repository you just set up.

function img_process(filename)
    """
    img_process -- reads in image, displays image, returns pixel information

    Args:
        filename (str): the name of the file you'd like to read in str quotes

    Returns:
        image (arr): array of image file loaded
        red   (arr): matrix corresponding to red channel pixels
        blue  (arr): matrix corresponding to blue channel pixels
        green (arr): matrix corresponding to green channel pixels
    """

    #read in image
    image = imread(filename)

    #plot image
    figure(2); clf();
    imshow(image)

    #extract variables
    red    = image[:,:,1]
    green  = image[:,:,2]
    blue   = image[:,:,3]

    return red, blue, green

end

reds, greens, blues = img_process("el-capitan.png")

size(reds), size(greens), size(blues)
<<<<<<< 6ac5148c4de8b2f4412376094ce59ad3fb47f1ee
=======


## Let’s say you think you can optimize this function in some way, but
## accidentally break it. Simulate this by adding println("BUG BUG BUG") somewhere
## in the code (and adding whatever else you want). Commit and push your “buggy”
## file to the repository you just set up.

function img_process(filename)
    """
    img_process -- reads in image, displays image, returns pixel information

    Args:
        filename (str): the name of the file you'd like to read in str quotes

    Returns:
        image (arr): array of image file loaded
        red   (arr): matrix corresponding to red channel pixels
        blue  (arr): matrix corresponding to blue channel pixels
        green (arr): matrix corresponding to green channel pixels
    """

    #read in image
    image = imread(filename)



    #plot image
    figure(2); clf();
    imshow(image)

    #extract variables
    red    = image[:,:,1]
    green  = image[:,:,2]
    blue   = image[:,:,3]

    return red, blue, green
    println("Reset with git reset -- mixed")
end

reds, greens, blues = img_process("el-capitan.png")


## Now, using version control commands in GitKraken, perform a git reset --mixed
## to undo your commit and delete the lines you added to get a “bug-free” version
## of your code. Also add the line println("Reset with git reset --mixed"). Think
## about whether this was real buggy code -- what would be the value of this reset?

#Depends on the type of bug. If you want to know where bug is occuring, a softer
#revision makese sense. If you don't care where bug is coming from, or you
#accidently made it, then it a harder revision would be better if you want to get
#rid of it.

## Make a new 360x640x3 matrix; let’s call this image2. Set image2[:,:,1] to be
## the G channel from the original image, image2[:,:,2] to be the B channel from
## the original image, and image2[:,:,3] to be the R channel from the original
## image. Use imshow() to display the original image and image2 side by side
## (hint: use subplot(1,2,1) to first make a left-hand axis and work with that;
## and then subplot(1,2,2) to make a right-hand axis, and work with that).
## The commands figure(figsize=[x,y]), title("your text goes here"), and axis("off")
## can be used to initialize a figure specified by x and y (width and height in
## inches), add a title, and turn off the axis, respectively, for aesthetics.
## Commit and push both the code and image to your repo.

image2 = cat(greens, blues, dims = 3)
image2 = cat(image2, reds, dims = 3)

size(image2)

image2[:,:,1] == elcap[:,:,2], image2[:,:,2] == elcap[:,:,3], image2[:,:,3] == elcap[:,:,1]


figure(3, figsize = (8,3)); clf();

subplot(1,2,1)
imshow(elcap)
title("El cap R-G-B")
axis("off")

subplot(1,2,2)
imshow(image2)
title("El cap G-B-R")
axis("off")
